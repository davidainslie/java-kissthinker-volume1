# Chapter 1 - What is KISS?

What is KISS with regards to IT development, and specifically Java development? It is nothing new. I’m not trying to claim that I have discovered anything here that is not already been done in some form or another. I’m simply bring together ideas and looking from different angles for a better view, to see things with increased clarity.This part covers the stepping stones to my open source libraries which I’ve been developing and still working on, which is the culmination of the ideas covered here.The source code can be used as helpers i.e. regarded as utility libraries to simplify your own development. The code/libraries can be used together as a framework for building standalone or client/server applications.However, over the course of this book many other mature, more powerful frameworks/libraries will be mentioned. The code that accompanies this book is essentially a proof of concept. That concept is simply an “approach” to developing code. The code/ideas presented should not be classified e.g. as a methodology, as a framework etc. as just like any other Developer tool, it is there to help you as a Developer produce better code. So it is not a matter of choosing whether to use some of the code here in place of say Spring (one of the best open source projects on the market). None of the “Kiss Thinker” code is supposed to be an alternative/rival to well established open source. It would just be hypocritical to write a book and express ideas without showing “hard copies” of my thinking. I could have taken the approach of many books and just produce adhoc examples along the way. However, pictures/images are usually better ways to show one’s vision and so I’ve produced a complete picture, code from front to back.------
DO WE NEED THE FOLLOWING??
Before starting our KISS Thinker journey, why not install the code that shows many of the ideas in this book? It’s always good, especially for your understanding, to see code in action, and the code does come with a lot of unit/integration tests. Following are the steps to get the KISS library up and running.STEPSNow at this stage, some of the steps might not mean that much to you. Everything will be explained in the relevant chapters that follow, at this point we just want to get the code building and running.Regarding some of these steps, especially to do with AspectJ and Eclipse, you may think that the build is tied into your IDE. Rest assured, the code only depends on the chosen build tool, in our case Maven. We could have used Ant, but that is old school, or we could have used Gradle, the new kid on the block. Gradle may probably be the future, but as many developers don’t know about it, the safest option was Maven. Safe? Ant users may disagree, but I had to choose some build tool, and hopefully you will see that Maven does the job. And what about Ivy? Ivy seems to be a half way house between Ant and Maven, and I’m afraid my one Ivy experience wasn’t that great.For Eclipse installAJDT 2.2.0: update site http://download.eclipse.org/tools/ajdt/42/updateAJDT for m2e: update site http://dist.springsource.org/release/AJDT/configurator/ ← don’t need and can’t get anywayUpon installing AJDT configure project “core-kissthinker” as an AspectJ project. It is this project that holds KISS Thinker aspect code.So, right click on this project, and in the popup select “Convert to AspectJ Project”.

---

### 1.1 KISS Introduction.
Agile – I love it.
Test driven development – I love it.
Scrum? Never did play rugby.
These days in the development world, there are a lot of buzzwords being thrown around. A lot of fads. Teams and especially project managers are trying to force this onto Developers. The ideas/concepts are definitely good things. I can’t imagine not doing TDD. But why are they being forced upon us? Why does it take me one minute to right one line of code and test it as part of a bug fix and then take me five minutes to complete the [Jira](https://www.atlassian.com/software/jira)? (Jira is mainly an issue tracker for software projects).
People are always looking for ways to improve things. One thing is for sure, as more so called improvements are put in place, there is more red tape i.e. more barriers for Developers.The main concept in this book is “KISS”, Keep It Simple Stupid.
Now many Developers are very, very, clever. They may prove how clever they are consciously or sub-consciously by writing code that only they understand. For me, clever code is something that any Developer can read for the first time and understand i.e. they can work with it, change it, extend it, reuse it.Let’s say I write a Swing layout manager. The most important thing is the API. Another Developer should be able to intuitively use it without having to read the Javadoc, and defininitly not have to look at the implementation. Then the second most import aspect of this layout manager is the actual implementation – maybe another Developer wishes to add to it.By writing KISS code you are not only keeping things simple, you are writing code with your fellow developers in mind. You want your code to be an extension of the Java libraries and not an abstraction e.g. a Swing framework can be very useful, so long as a Swing developer can stick with standard Swing i.e. the Swing framework does not compromise the Swing developer’s work. SwingX although not a framework, has handy extensions to Swing to aid the developer. The developer is still writing Swing but SwingX can help improve the developer’s productivity. I once worked on a project where an entire Swing framework had been created. For me, it was counter-productive, counter-intuitive and forced the Swing developer to code unnaturally. The team were adamant that it was an agile project. I wish teams would use these terms correctly. Anyway, we’ll come back to “less helpful” Swing frameworks in chapter 10.

A great deal of my open source code (www.kissthinker.com) will be covered in this book. What I’d like to show are comparisons of what I would call traditional ways of writing code and the KISS way.

Just as a quickie, which of the following two pieces of code is easier to read?What the code is essentially doing is when the JTextField named “accountNameTextField” becomes “enabled” (which is a Swing bound property), so the JButton named “applyModificationsButton” should become “enabled”.
A traditional approach:

```java
accountNameTextField.addPropertyChangeListener(    new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
            if ("enabled".equals(propertyChangeEvent.getPropertyName())) {                applyModificationsButton.setEnabled(
                    (Boolean)propertyChangeEvent.getNewValue();
                    .....
```

A Swing Developer would note that we could have also written:

```java
accountNameTextField.addPropertyChangeListener(“enabled”,
    new PropertyChangeListener ..... continuing as above but without the "if")
```

The KISS way:

```javaBean.on(applyModificationsButton).enabled()
    .when(accountNameTextField).enabled();
```

Notes on the traditional approach:
* Hard to read* A lot of line wrapping due to the fact that some projects demand that code must strickly follow the “Java Style” including not exceeding 80 columns (KISS does not like this style, which we shall see later).* Difficult to change. What if “applyModificationsButton” should become “enabled” when also “accountManagerComboBox” is “enabled” i.e. once both these components are enabled then our JButton should become enabled. The code may now become as shown:

```java
accountNameTextField.addPropertyChangeListener(    new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent propertyChangeEvent) {            if ("enabled".equals(propertyChangeEvent.getPropertyName())) {                if (accountManagerComboBox.isEnabled()) {                    applyModificationsButton.setEnabled(                          (Boolean)propertyChangeEvent.getNewValue();                        .....                                accountManagerComboBox.addPropertyChangeListener(    new PropertyChangeListener() {        public void propertyChange(PropertyChangeEvent propertyChangeEvent) {            if ("enabled".equals(propertyChangeEvent.getPropertyName())) {                if (accountNameTextField.isEnabled()) {                    applyModificationsButton.setEnabled(                          (Boolean)propertyChangeEvent.getNewValue();
                        .....
```

Notes on the KISS approach:

* The style is loosely based on functional programming, and what we have is a DSL (domain specific language - more on this late). KISS states that the API should be intuitive.* The underlying implementation (which is in the Bean class) uses the standard JavaBean property change listeners. KISS states that implementations (like the API) should be intuitive for other developers to extend when necessary. If the underlying implementation is (mainly) the use of standard Java libraries, and the code is easy to read via sound styles and practices, then you can say the implementation is KISS.* We have hidden the complexities to produce a cleaner, easier to use API. When we include the rule that “accountManagerComboBox” must also be “enabled”:

```java
Bean.on(applyModificationsButton).enabled()    .when(accountNameTextField).enabled()    .and(accountManagerComboBox).enabled();
```

There is an in depth discussion on the “Bean” class in chapter 5.Rules like this are often declared in XML files with some fancy parsing code. Extracting “configurations” from Java to the likes of XML, JSON, property files etc., but it is overused. Often “separation of concerns” are better done within the code.The functional style just helps! What more can I say? At this point, if you can’t see the simplicity, and so the strength of KISS, then there is no point in me writing pages of explanation (Javadoc). Just like XML configurations, documentation such as Javadoc are very important, but can be overused. Of course the irony of many projects is that documentation and Javadoc are under used and the code is just not KISS.Also, at this point, if you are afraid of the “functional” style, again I hope you can bare with me and just go with the flow throughout this book. Hopefully examples (and some explanations) will help convince you.However, and this is a very important point. We are not really writing functional code here. The code in this book is based around Java 7. The ability to write functional code has appeared in Java 8.

When I started work on this book, Java 7 was the current version. I had been introduced to functional programming via Haskell and Scala and became heavily influenced by the functional paradigm but also a tad confused by it. We will be encountering functional programming mainly from a style point of view with regards to Java 7, but will touch on actual functions with Java 8.

A> ## As a quick side note 
A> Whether you like it or not, functional programming abilities will become bigger in Java. Why? In order for anything to survive, it must adapt. Just compare the latest Java with the first version. I can’t imagine writing an application on just Java 2! For example, you may not want to use any of the classes in Java’s concurrency package and just stick with “synchronized” and “wait/notify”, but demand dictated the inclusion of concurrency package. It is the same reason why closures had to become part the Java core libraries. (Closures will be covered in the chapter on functional programming). Oh! And the basics of AOP (Aspect Oriented Programming) have been in Java since I believe Java 3.So, you can develop non OO code with Java. Actually, most developers already do – it’s called procedural code.Everything is there for you to use. Don’t be afraid. In fact, it is to your advantage in at least one way, whether it is to improve code, or advance your career, or anything else. You can’t stop the advancements in IT development. Java 7, 8, 9 etc., Scala, Groovy. And if you really want to know about functional programming (and maybe have a real scare) try out Haskell.

### 1.2 KISS DiscussionKISS is all about getting the best out of everyone. Get the best out of the Developers of course, but also help with Devops, Manager, Business communications etc. I’ve been on too many projects where the setup is best for the technical lead, or the loudest most opinionated Developers. Remember, everyone is making a contribution. People leave the project and new Developers join and must be trained up. And with many more factors it is amazing how projects hold themselves back by not being KISS.So KISS is all about keeping it simple, even when dealing with complexities. It can be harder than it should be. Humans tend to over complicate things. Philosophers come along and try to dissect this. The example I’m going to take is from Bruce Lee. He wasn’t just a “fighter”, he was many things, including a philosopher, just watch any of his interviews.But first, why Bruce Lee as an example of breaking down complexities for improvement purposes?I try to do Jeet Kune Do, Bruce Lee’s own martial art. Now I first tried out Tai Kwan Do. I didn’t do that for very long. I remember preparing for my yellow belt grading. Christophe, a close friend of mine, a black belt, was helping me out. We were practising a kick together, when my foot connected with his and... he broke one of my toes. I still did the grading with my toe heavily strapped, but after that I never went back. Instead I found Jeet Kune Do (JKD). My instructor and friend Chris not only loves JKD, he also loves the philosophy and it was this that really drew me to this art, as Bruce Lee’s thinking is relevant to just about everything, even software development.BEST EXAMPLE??? Ideas of combining methodologiesOpen source – write as little code as possibleAllowing developers to work most efficiently. Controls, rules, standards are required but this can often stifle productivity.Developers need to be allowed to express themselvesMention IDEs. Developers should use whichever they are most productive/comfortable with.The build. Maven is preferred over Ant because, easier for developers to use multiple IDEs
