# Chapter 1 - What is KISS?

What is KISS with regards to IT development, and specifically Java development? It is nothing new. I’m not trying to claim that I have discovered anything here that is not already been done in some form of another. I’m simply bring together ideas and looking from different angles for a better view, to see things with increased clarity.This part covers the stepping stones to my open source libraries which I’ve been developing and still working on, which is the culmination of the ideas covered here.The source code can be used as helpers i.e. regarded as utility libraries to simplify your own development. The code/libraries can be used together as a framework for building standalone or client/server applications.However, over the course of this book many other mature, more powerful frameworks/libraries will be mentioned. The code that accompanies this book is essentially a proof of concept. That concept is simply an “approach” to developing code. The code/ideas presented should not be classified e.g. as a methodology, as a framework etc. as just like any other Developer tool, it is there to help you as a Developer produce better code. So it is not a matter of choosing whether to use some of the code here in place of say Spring (one of the best open source projects on the market). None of the “Kiss Thinker” code is supposed to be an alternative/rival to well established open source. It would just be hypocritical to write a book and express ideas without showing “hard copies” of my thinking. I could have taken the approach of many books and just produce adhoc examples along the way. However, pictures/images are usually better ways to show one’s vision and so I’ve produced a complete picture, code from front to back.Before starting our KISS Thinker journey, why not install the code that shows many of the ideas in this book? It’s always good, especially for your understanding, to see code in action, and the code does come with a lot of unit/integration tests. Following are the steps to get the KISS library up and running.TODOSTEPSNow at this stage, some of the steps might not mean that much to you. Everything will be explained in the relevant chapters that follow, at this point we just want to get the code building and running.Regarding some of these steps, especially to do with AspectJ and Eclipse, you may think that the build is tied into your IDE. Rest assured, the code only depends on the chosen build tool, in our case Maven. We could have used Ant, but that is old school, or we could have used Gradle, the new kid on the block. Gradle may probably be the future, but as many developers don’t know about it, the safest option was Maven. Safe? Ant users may disagree, but I had to choose some build tool, and hopefully you will see that Maven does the job. And what about Ivy? Ivy seems to be a half way house between Ant and Maven, and I’m afraid my one Ivy experience wasn’t that great.For Eclipse installAJDT 2.2.0: update site http://download.eclipse.org/tools/ajdt/42/updateAJDT for m2e: update site http://dist.springsource.org/release/AJDT/configurator/ ← don’t need and can’t get anywayUpon installing AJDT configure project “core-kissthinker” as an AspectJ project. It is this project that holds KISS Thinker aspect code.So, right click on this project, and in the popup select “Convert to AspectJ Project”.
