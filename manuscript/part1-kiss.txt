# Part 1 - KISS

A Developer’s job is a weird one. We sit, stare and type.

In front of us we see a language that is only written. We become obsessed with what is on the screen.We are writing code to solve a problem. However, the main problem is that our solution can be written an infinite number of ways. Even if the impossible happened and two developers came up with exactly the same code it most probably still be different if we take into account code style/formatting.
The next problem we have as Developers is that once we do produce a solution, we always find ways to improve the code (though those improvements can backfire).And there are still many other problems to overcome. Developers usually work as part of a team. How many teams really work as a team? How many teams are more of a dictatorship than a democracy?
What about the problem of human individuality? Producing code is a form of art. We create something from nothing. And as everyone is individual (even as part of a team), each Developer has different ideas, opinions, preferences etc.
Let’s briefly digress and think about human individuality and team work. Controls are put in place within a project. The technical lead can often be a control freak. Style checkers are put in place. And the list goes on. Now let’s just think for a moment think about another team. A football team. The Captain (our technical lead) decides that everyone should play with their right foot as that is the Captain’s best foot. He wants uniformity in the team but has just removed the strengths of many of the players. Many are may now playing at 50% efficiency (though in the real football world, some may be playing at more like 10%).So the real problem with development is not the actual problem at hand i.e. the problem that is a business requirement to solve. No, the real problem is that Developer’s jobs are made unnecessarily difficult. Individuals can thrive. A team of individuals can thrive. Bring out the best in the Developers. Let them do their jobs. But how?No matter what, there still has to be controls put in place. There still has to be some uniformity.

This book brings together “ways of thinking”. The application of knowledge. Get the best out of Developers. Work as a team. Allow creativity. And most important, come up with a solution that can be maintained and extended – the cornerstone of Object Orientation. But we will go beyond Object Orientation. Like the best recipes, many ingredients should be used/combined. Why not mix in Aspect Oriented Programming and Functional Programming? Many Developer’s will frown upon some of the concepts in this book. Many like to stick to good old fashioned OO. However, these types of Developers rarely write OO. I shall show you how introducing ideas from other methodologies will actually improve your code. Will actually make your traditional (and somewhat lacking) OO code look and behave more, well, OO. So with more ingredients, more ideas, our code achieves the main goal of maintainability and extensibility.
This book is intended for experienced Java Developers, and technical project managers. This is not a book about learning Java, but can still be used by a beginner in conjunction with any book that teaches just Java.This book is mainly about the application of knowledge. I’ve worked with Java Developers who are far cleverer than me and yet they're code is not good. Ok, that’s a tad unfair. What they are writing is code that works. Code that they can read and change and enhance. However, give that code to someone else (maybe the originator has left the team) and that code can look like “pigeon” Java to the new Developer i.e. Java that they are not comfortable with and will struggle to change and extend it.
I’ve also worked on projects where you must work within a framework. The idea of a framework being that a Developer will write code more productively as essentially boilerplate code has already been written. However, most of the time, these (in house) frameworks are too rigid and can just cause different issues. A good framework should remove the boilerplate code but at the same time not impose itself on to the Developer’s code. Take [Spring](https://spring.io/) for example. Many Developers do regard Spring as a framework. However, I don’t see it that way. Spring is very clever in that it does not impose itself on your code like so many frameworks (especially in house ones). To me, Spring is a helper. It helps keep your code cleaner. The first way I used Spring was to help my TDD (Test Driven Development). My code would look simpler and yet you wouldn’t see Spring code in "my" code. In chapter 7, we’ll look at some of the essential Java open sources libraries.
As a result of where I’ve worked (mainly in Banking) and specifically the types of projects I’m used to, my thinking regarding KISS (Keep It Simple Stupid) is based on team projects that can be quite large and where Developers, Managers and the Business must work together. However, this book and the ideas are still relevant to say projects of just one Developer, maybe just putting together a website for a small firm.
Please note that throughout the book I’m quite blatant about my opinions. Though I don’t say, “do it my way”, or “this way is definitely better than that way”. The point is that software development is a form of creation, and what should be created comes from the eyes of the beholder. And yet Developers are often forced to conform and hold back their opinions, ideas, creations. Of course a team must have certain rules/standards put in place, but a balance has to be the goal. On many teams there are always a few strong characters who will always have their opinions heard and will often push aside the opinions of those of a milder disposition.
So these are my opinions. My observations. My thinking. 
A [KISS Thinker](http://www.kissthinker.com).
**With an open mind, please enjoy the ride.**A> ## Books.A> While you read this book, let me just say that I have a few issues with IT books – I’m sure you do to. For starters, any issues you have with this book, please let me know at <TODO Leanpub>. Issues may range from simply poor schpelling (ha ha), bad grammer, to the way I explain myself, or how to setup/run the code.A>A> IT books often get out of date very quickly. Too often they just show/explain concepts that you can easily find on the web (which are more up to date). And certainly too often there is too much space taken up, showing either core Java APIs or open source APIs – again, it is often easier to look these up on the web.A>A> One of the most annoying things about IT books is getting a book’s code/examples up and running. While I’m reading a book, I like to try out what is being discussed. It is very disappointing when even the excellent books don’t give a good enough explanation as to how to get “up and running”.A>A> Here is a quote from the book “iBatis in Action” – which by the way is a brilliant book (iBatis has been renamed as myBatis and is one of those fantastic open source libraries that doesn’t get the attention it deserves):A>A> *"Setting up a database server is beyond the scope of this book, so we will only provide you with what you need to do on the assumption that the database isalready set up and functional. Here is the MySQL script that creates the table we will use and adds some sample data to it…"*A>A> The book, and indeed iBatis/myBatis is all about persistence, and yet no one thought to write (maybe in an appendix) a one pager to go through the setup of even an embedded database to run tests against!A>A> I do have a long list of issues with other books. Another one, which seems to do everything accept what the title indicates is “Spring Persistence – A Running Start”. Afraid I wasn’t even able to start crawling.A>A> If this book is just another typical book, please do let me know. After all, that is what “agile” is all about – produce something; get feedback to highlight issues; then rectify – though in terms of a book, the process will probably be about as agile as a ninety year old with arthritis – which is very much the same as many projects I’ve worked on.